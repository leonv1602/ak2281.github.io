[["index.html", "Modul Analisis Deret Waktu - AK2281 Selamat Datang ! Kata Pengantar Kontak Penulis Penyusun Modul Daftar Notasi dan Simbol yang Digunakan", " Modul Analisis Deret Waktu - AK2281 Leonardo V Kosasih, S.Aktr, ASAI Selamat Datang ! Kata Pengantar Puji dan syukur saya ucapkan kepada Lorem Ipsum Kontak Penulis Github: leonv1602 LinkedIn: Leonardo V Kosasih Penyusun Modul Koordinator Praktikum : Leonardo V. Kosasih, S.Aktr., ASAI Tim Penyusun Modul Praktikum : Ang Ditra Alif Pradana-10120046 Matthew Alfarazh - 10820021 Feby Yolanda - 10819028 Pamella Cathryn - 10820033 Ferdinan Gratius Budisatya - 10819041 Jeremy - 10820034 Jevan Christopher Aryento - 10820010 Aloysius Vincent - 10820038 Shelly Delfiani - 10820014 Kevin Christ Aditya - 10820039 Binsar Gunadi Simbolon - 10820017 Shafina Aulia Kusuma Putri - 10820049 Daftar Notasi dan Simbol yang Digunakan \\(\\varepsilon_t\\)(baca : epsilon) : galat ke-\\(t\\); \\(\\gamma_k\\) (baca : gamma) : kovariansi ke-\\(k\\); \\(\\rho_k\\) (baca : rho) : korelasi ke-\\(k\\); \\(\\phi_{ij}\\) (baca : phi) : korelasi parsial antara \\(i\\) dan \\(j\\); \\(X \\sim \\text{N}(0,\\sigma^2)\\) : Peubah acak \\(X\\) berdistribusi Normal dengan rataan 0 dan variansi \\(\\sigma^2\\); ACF : Auto Correlation Function atau Fungsi Auto korelasi; PACF : Partial Auto Correlation Function atau Fungsi Auto Korelasi Parsial; \\(\\mathbb{N}\\) : Himpunan bilangan asli \\(\\{1,2,3,\\dots\\}\\); \\(\\mathbb{N}_0\\) : Himpunan bilangan asli dan 0 \\(\\{0,1,2,3,\\dots\\}\\); \\(\\sigma^2_\\varepsilon\\) (baca : sigma) : variansi dari \\(\\varepsilon\\); \\(\\bar{x}\\) : rataan dari \\(x\\); \\(\\theta\\) (baca : theta); \\(\\chi^2\\) (baca : chi-squared); \\(\\mathbf{A}\\) : matriks \\(A\\) ukuran \\(k\\times k\\); \\(\\in\\) : elemen dari suatu himpunan. \\(\\forall\\) : untuk setiap "],["konsep-dasar-deret-waktu.html", "1 Konsep Dasar Deret Waktu 1.1 Tujuan 1.2 Stasioneritas 1.3 Autokorelasi 1.4 Random Walk 1.5 Contoh Soal", " 1 Konsep Dasar Deret Waktu 1.1 Tujuan Memahami pola data deret waktu, Mengidentifikasi deret waktu stasioner, Menghitung rataan, kovariansi dan korelasi pada deret waktu Mengenal model random walk. Mengidentifikasi perilaku ACF dan PACF. 1.2 Stasioneritas Asumsi yang harus dipenuhi pada pemodelan deret waktu adalah stasioneritas. Ide dasar dari kestasioneran adalah perilaku data tidak berubah sepanjang waktu. Ada 2 jenis stasioneritas yaitu stasioneritas kuat dan stasioneritas lemah. Misal proses \\(\\{Y_t\\}\\) dengan rataan \\(\\mu_t\\). \\(\\{Y_t\\}\\) dikatakan stasioner kuat jika distribusi gabungan dari \\(Y_{t_1},Y_{t_2},\\dots,Y_{t_n}\\) sama dengan distribusi gabungan \\(Y_{t_1-k},Y_{t_2-k},\\dots,Y_{t_n-k}\\) untuk semua waktu \\(t_1,t_2,\\dots,t_n\\) dan lag waktu \\(k&gt;0\\). Contoh : proses white noise \\(\\{\\varepsilon_t\\}\\) dengan \\(\\varepsilon_t \\sim \\text{N}(0, \\sigma^2)\\) saling bebas dan indentik. Sedangkan proses stokastik \\(\\{Y_t \\}\\) dikatakan stasioner lemah jika: 1. Rataan konstan sepanjang waktu atau \\(E[Y_t] = \\mu \\quad \\forall t \\in \\mathbb{N}_0\\); dan 2. Kovariansi untuk semua waktu \\(t\\) dan lag \\(k\\) konstan atau \\(\\text{Cov}(Y_t,Y_{t-k}) = \\gamma_{t,t-k} = \\gamma_{0,k} = \\gamma_k\\). Pada modul ini hanya dibahas tentang sifat kestasioneran lemah. Beberapa contoh pola data dalam deret waktu, diantaranya pola tren, musiman, dan pola stasioner. 1. Pola tren: Terjadi jika terdapat kenaikan atau penurunan sekuler jangka panjang dalam data; 2. Pola musiman: Terjadi jika suatu deret dipengaruhi oleh faktor musiman (misalnya kuartal tahun, bulanan, atau hari-hari pada minggu tertentu); dan 3. Pola stasioner: Terjadi jika data berfluktuasi di sekitar rata-rata yang konstan. # Package yang digunakan library(zoo) library(forecast) library(tseries) # Seed agar simulasi tetap sama set.seed(1602) # Contoh data White Noise wn &lt;- arima.sim(model =list(order = c(0,0,0)),n =300) plot(wn, main = &#39;Data 1, Stasioner&#39;) abline(h=mean(wn),col=&#39;red&#39;,lwd=2,lty = 2) Jurnal Praktikum 1 1. Berikan interpretasi anda terhadap gambar tersebut ! 2. Apakah data tersebar pada rataan data ? 3. Apakah terdapat pola tren data ? # Seed agar simulasi tetap sama set.seed(1602) # Data Harga Emas data(gold) sum &lt;- ts(gold[1:300]) sum &lt;- na.fill(sum,median(sum,na.rm=TRUE)) mean_sum &lt;- mean(sum,na.rm=TRUE) plot(sum, main = &#39;Data Harga Emas, Tidak Stasioner&#39;) abline(h=mean_sum,col=&#39;red&#39;,lwd=2,lty = 2) Jurnal Praktikum 2 1. Berikan interpretasi anda terhadap gambar tersebut ! 2. Apakah data tersebar pada rataan data ? 3. Apakah terdapat pola tren data ? # Seed agar simulasi tetap sama set.seed(1602) # Data CO2 data(&quot;co2&quot;) seasonal &lt;- ts(co2[1:300]) plot(seasonal, main = &#39;Data CO2, Tidak Stasioner&#39;) abline(h=mean(seasonal),col=&#39;red&#39;,lwd=2,lty = 2) Jurnal Praktikum 3 1. Berikan interpretasi anda terhadap gambar tersebut ! 2. Apakah data tersebar pada rataan data ? 3. Apakah terdapat pola tren data ? # Seed agar simulasi tetap sama set.seed(1602) # Membuat data Random Walk random_walk &lt;- arima.sim(model = list(order=c(0,1,0)),n=300) plot(random_walk, main = &#39;Data Random Walk, Tidak Stasioner&#39;) abline(h=mean(random_walk),col=&#39;red&#39;,lwd=2,lty = 2) Jurnal Praktikum 4 1. Berikan interpretasi anda terhadap gambar tersebut ! 2. Apakah data tersebar pada rataan data ? 3. Apakah terdapat pola tren data ? 1.3 Autokorelasi Misalkan proses \\(\\{Y_t\\}\\) stasioner maka korelasi antar peubah acak yang terpisah sejauh \\(k\\) lag waktu adalah: \\[\\begin{align*} \\rho_k &amp;= \\text{Corr}(Y_t, Y_{t-k}) \\\\ &amp;= \\frac{\\text{Cov}(Y_t, Y_{t-k})}{\\sqrt{\\text{Var}(Y_t)\\text{Var}(Y_{t-k})}} \\\\ &amp;= \\frac{\\gamma_k}{\\gamma_0}, \\quad k \\in \\mathbb{N}_0 \\end{align*}\\] Terdapat statistik uji untuk menguji apakah nilai autokorelasi pada suatu lag ke-\\(k\\) signifikan atau tidak. Statistik uji tersebut adalah statistik uji \\(t_{ratio}\\) dengan \\[\\begin{align*} H_0 : \\rho_k = 0 \\\\ H_1 : \\rho_k \\neq 0 \\end{align*}\\] dengan \\(k \\in \\mathbb{N}\\). Statistik hitung dari uji ini adalah: \\[\\begin{equation} t_{\\text{ratio}} := \\frac{\\hat{\\rho}_k}{\\sqrt{\\left( 1 + \\sum_{i = 1}^{k - 1} \\hat{\\rho}_i\\right)/n}} \\tag{1.1} \\end{equation}\\] dengan \\(n\\) adalah ukuran sampel. \\(H_0\\) akan ditolak jika \\(|t_{\\text{hitung}}| &gt; Z_{1-\\frac{\\alpha}{2}}\\) dengan \\(Z_{1-\\frac{\\alpha}{2}}\\) adalah persentil ke-(\\(1-\\frac{\\alpha}{2}\\)) dari distribusi normal baku. Sedangkan statistik uji untuk menguji apakah autokorelasi dari lag pertama hingga lag ke-\\(k\\) signikan adalah Uji Ljung Box dengan: \\[\\begin{align*} H_0 &amp;: \\rho_1 = \\rho_2 = \\dots = \\rho_k = 0 \\\\ H_1 &amp;: \\rho_j \\neq 0, \\quad \\quad j \\in \\{1, \\dots, k \\} \\end{align*}\\] dengan \\(k \\in \\mathbb{N}\\). Statistik hitung dari uji ini adalah: \\[\\begin{equation} Q(k) := n\\left(n+2\\right)\\sum_{i=1}^k \\frac{\\hat{\\rho}_i^2}{n-i} \\tag{1.2} \\end{equation}\\] \\(H_0\\) ditolak jika \\(Q(k) &gt; \\chi^2_{1-\\alpha,k}\\) dengan \\(\\chi^2_{1-\\alpha,k}\\) adalah nilai persentil \\(1-\\alpha\\) dari distribusi \\(\\chi^2\\) dengan derajat kebebasan \\(k\\). 1.4 Random Walk Misalkan \\(\\varepsilon_1,\\varepsilon_2, \\dots\\) barisan peubah acak yang berdistribusi Normal yang saling bebas dan identik dengan \\(E[\\varepsilon_i]=0\\) dan \\(\\text{Var}(\\varepsilon_i) =\\sigma^2_\\varepsilon\\) untuk semua \\(i\\). Maka proses random walk dapat dikonstruksi dengan persamaan berikut: \\[\\begin{equation} Y_t = \\sum_{i=1}^t \\varepsilon_i \\tag{1.3} \\end{equation}\\] yang dapat ditulis secara rekursif seperti berikut: \\[\\begin{equation} Y_t = Y_{t-1} - \\varepsilon_t \\end{equation}\\] 1.5 Contoh Soal Unduh data berikut ini TEKAN UNTUK MENGUNDUH DATA kemudian buatlah algoritma untuk menghitung : 1. Rataan dari data; 2. Kovariansi dari data; dan 3. Korelasi dari data # Membaca data library(readxl) df &lt;- read_excel(&quot;data.xlsx&quot;) # Membuat plot data plot(df$Date, df$`Ice Cream Sales`, type = &#39;line&#39;, xlab= &#39;Tanggal&#39;, ylab= &#39;Penjualan Es Krim&#39;, col = &#39;black&#39;, main = &#39;Plot Data Penjualan Es Krim&#39;) abline(h=mean(df$`Ice Cream Sales`), col=&#39;red&#39;, lwd=2,lty = 2) # Algoritma menghitung rataan (boleh menggunakan sum) sum_x &lt;- sum(df$`Ice Cream Sales`) len &lt;- length(df$`Ice Cream Sales`) rata_x &lt;- sum_x/len # Algoritma menghitung kovariansi maxLag &lt;- 24 kov &lt;- rep(0, maxLag) for (k in 1: maxLag) { x_star &lt;- df$`Ice Cream Sales`[1:(len-k+1)]- mean(df$`Ice Cream Sales`[1:(len-k+1)]) y_star &lt;- df$`Ice Cream Sales`[(1+k-1):len]- mean(df$`Ice Cream Sales`[(1+k-1):len]) kov[k] &lt;- (x_star)%*%(y_star) /(len) } # Algoritma menghitung korelasi kor &lt;- rep(0, maxLag) for (k in 1: maxLag) { x_star &lt;- df$`Ice Cream Sales`[1:(len-k+1)]- mean(df$`Ice Cream Sales`[1:(len-k+1)]) y_star &lt;- df$`Ice Cream Sales`[k:len]- mean(df$`Ice Cream Sales`[k:len]) penyebut &lt;- sqrt((x_star%*%x_star)*(y_star%*%y_star)) kor[k] &lt;- x_star%*%y_star/penyebut } Penjelasan lebih lanjut : Persamaan kovariansi dapat ditulis sebagai berikut : \\[\\begin{equation} \\hat{\\gamma}_{XY} = \\frac{\\sum_{i=1}^n (x_i - \\bar{x})(y_i - \\bar{y})}{n} = \\frac{1}{n}(\\vec{x}^* \\cdot \\vec{y}^*) \\end{equation}\\] dengan \\(\\vec{x}^* = (x_1 - \\bar{x}, \\dots, x_n - \\bar{x})^T\\) dan \\(\\vec{y}^* = (y_1 - \\bar{y}, \\dots, y_n - \\bar{y})^T\\). Sedangkan persamaan korelasi dapat ditulis sebagai berikut \\[\\begin{equation} \\hat{\\rho}_{XY} = \\frac{\\sum_{i=1}^n (x_i - \\bar{x})(y_i - \\bar{y})}{\\sqrt{\\sum_{i=1}^n (x_i - \\bar{x})^2\\sum_{i=1}^n(y_i - \\bar{y})^2}} = \\frac{1}{\\sqrt{(\\vec{x}^{*^T}\\cdot \\vec{x}^*)(\\vec{y}^{*^T}\\cdot \\vec{y}^{*})}}(\\vec{x}^* \\cdot \\vec{y}^*) \\end{equation}\\] Catatan : Perhatikan bahwa terdapat kovariansi dan variansi sampel dan populasi. Untuk algoritma menghitung kovariansi sampel dan variansi sampel diserahkan kepada pembaca. "],["model-deret-waktu-stasioner.html", "2 Model Deret Waktu Stasioner 2.1 Moving Average (MA) 2.2 Autoregressive (AR) 2.3 Autoregressive Moving Average (ARMA) 2.4 Simulasi Data Manual", " 2 Model Deret Waktu Stasioner Pada bab ini akan dipelajari perilaku umum dari ACF dan PACF untuk menentukan orde pada model deret waktu ARMA yang akan digunakan. Dua jenis perilaku umum yang ditunjukkan adalah tails off dan cuts off. Gambar 2.1: Tails off (gambar atas) dan Cuts Off (gambar bawah) Berikut adalah persamaan autokorelasi sampel : \\[\\begin{align*} \\hat{\\rho}_k &amp;= \\frac{\\gamma_k}{\\gamma_0} \\\\ &amp;= \\frac{\\sum_{t=1}^{n-k}(y_t - \\bar{y})(y_{t+k} - \\bar{y})}{\\sum_{t=1}^n(y_t - \\bar{y})^2} \\quad k \\in \\mathbb{N} \\end{align*}\\] Sedangkan untuk persamaan autokorelasi parsial sampel adalah sebagai berikut : \\[\\begin{align*} \\hat{\\phi}_{ij} = \\begin{cases} \\hat{\\rho}_1, \\quad i = j = 1 \\\\ \\frac{\\hat{\\rho}_k - \\sum_{j=1}^{k-1} \\hat{\\phi}_{k-1,j}\\hat{\\rho}_{k-j}}{1- \\sum_{j=1}^{k-1} \\hat{\\phi}_{k-1,j}\\hat{\\rho}_{j}}, \\quad k = 2,3,4,\\dots \\\\ \\hat{\\phi}_{k-1,j} - \\hat{\\phi}_{k,k}\\hat{\\phi}_{k-1,k-j}, \\quad j \\in \\mathbb{N} \\end{cases} \\end{align*}\\] Perilaku umum dari ACF dan PACF untuk model ARMA. AR\\((p)\\) MA\\((q)\\) ARMA\\((p,q)\\) ACF Tails off Cuts off setelah lag ke-\\(q\\) Tails off setelah lag ke-\\(q\\) PACF Cuts off setelah lag ke-\\(p\\) Tails off Tails off setelah lag ke-\\(p\\) Model deret waktu umum yang sering digunakan adalah model regresi diri (Autoregressive), dinotasikan AR, model rataan bergerak (Moving Average), dinotasikan MA, dan model campuran regresi diri dan rataan bergerak (Autoregressive Moving Average), dinotasikan ARMA. 2.1 Moving Average (MA) Misalkan \\(Y_t=(Y_1,Y_2,…,Y_n )\\), jika proses \\(\\{Y_t\\}\\) mengikuti proses MA dengan orde \\(q\\) maka dapat dinyatakan dengan persamaan berikut \\[\\begin{equation} Y_t=\\varepsilon_t - \\theta_1 \\varepsilon_{t-1}-\\theta_2 \\varepsilon_{t-2}-\\dots-\\theta_q \\varepsilon_{t-q} \\end{equation}\\] Misalkan \\(Y_t\\) mengikuti proses MA(1) maka dapat dinyatakan dengan persamaan berikut \\[\\begin{equation} Y_t=\\varepsilon_t - \\theta_1 \\varepsilon_{t-1} \\end{equation}\\] Karena \\(\\varepsilon_t\\sim \\text{Normal}(0,\\sigma^2_\\varepsilon)\\), maka \\(E[Y_t]=0\\) dan \\(\\text{Var}(Y_t)=(1+\\theta^2)\\sigma_\\varepsilon^2\\) (Bukti diserahkan kepada pembaca sebagai latihan). sedangkan untuk kovariansi dari model MA dapat diperoleh sebagai berikut \\[\\begin{align*} \\text{Cov}(Y_t,Y_{t-1}) &amp;=\\text{Cov}(\\varepsilon_t-\\theta_1 \\varepsilon_{t-1}, \\varepsilon_{t-1}-\\theta_1 \\varepsilon_{t-2}) \\\\ &amp;=-\\theta_1 \\text{Cov}(\\varepsilon_{t-1},\\varepsilon_{t-1}) \\quad (\\text{Mengapa?}) \\\\ &amp;=-\\theta_1 \\sigma_\\varepsilon^2 \\end{align*}\\] dan \\[\\begin{align*} \\text{Cov}(Y_t,Y_{t-2})&amp;=\\text{Cov}(\\varepsilon_t - \\theta_1 \\varepsilon_{t-1},\\varepsilon_{t-2}-\\theta_1\\varepsilon_{t-3}) \\\\ &amp;= 0 \\quad \\text{(Mengapa?)} \\end{align*}\\] Sehingga fungsi autokovariansi untuk model MA(1) adalah \\[\\begin{align*} \\gamma_k = \\begin{cases} (1+\\theta_1^2)\\sigma^2_\\varepsilon, \\quad &amp;k =0 \\\\ -\\theta_1 \\sigma^2_\\varepsilon, \\quad &amp;k = 1 \\\\ 0, \\quad &amp;k &gt; 1 \\end{cases} \\end{align*}\\] dan fungsi autokorelasinya adalah \\[\\begin{align*} \\rho_k = \\begin{cases} 1, \\quad &amp;k =0 \\\\ \\frac{-\\theta_1}{1+\\theta^2_1}, \\quad &amp;k = 1 \\\\ 0, \\quad &amp;k &gt;1 \\end{cases} \\end{align*}\\] Untuk membuat simulasi model MA(1) dapat menggunakan kode berikut : n_sim &lt;- 150 # Banyak data theta &lt;- -0.8 # Nilai dari theta_1 simulasi_ar &lt;- arima.sim(model = list(c(0,0,1), ma = theta), n = n_sim) plot(simulasi_ar, main = &#39;Grafik Data MA(1)&#39;) acf(simulasi_ar, main = &#39;Grafik ACF Data MA(1)&#39;, lag.max = 36) pacf(simulasi_ar, main = &#39;Grafik PACF Data MA(1)&#39;, lag.max = 36) Jurnal Praktikum 5 1. Berikan interpretasi anda terhadap gambar tersebut ! 2. Apakah data tersebar pada rataan data ? 3. Apakah terdapat pola tren data ? acf(simulasi_ar, main = &#39;Grafik ACF Data MA(1)&#39;, lag.max = 36) Jurnal Praktikum 6 1. Berikan interpretasi anda terhadap gambar tersebut ! 2. Apakah ACF berprilaku sesuai dengan model MA ? 3. Apakah data tersebut masih cocok dimodelkan dengan model MA(1) ? Berikan alasan anda ! pacf(simulasi_ar, main = &#39;Grafik PACF Data MA(1)&#39;, lag.max = 36) Jurnal Praktikum 7 1. Berikan interpretasi anda terhadap gambar tersebut ! 2. Apakah PACF berprilaku sesuai dengan model MA ? 3. Apakah data tersebut masih cocok dimodelkan dengan model MA(1) ? Berikan alasan anda ! 3. Ulangi langkah-langkah pada Jurnal Praktikum 6 dan Jurnal Praktikum 7 dengan mengganti nilai variabel theta dan n_sim! Catatan: Nilai variabel theta dibuat negatif karena bahasa pemrograman R mendefinisikan model MA (\\(q\\)) sebagai: \\[\\begin{equation} Y_t=\\varepsilon_t + \\theta_1 \\varepsilon_{t-1} + \\theta_2 \\varepsilon_{t-2} + \\dots + \\theta_q \\varepsilon_{t-q} \\tag{2.1} \\end{equation}\\] 2.2 Autoregressive (AR) Misalkan \\(Y_t=(Y_1,Y_2,…,Y_n )\\), jika proses \\(\\{Y_t\\}\\) mengikuti proses Autoregressive (AR) dengan orde \\(p\\) maka dapat dinyatakan dengan persamaan berikut \\[\\begin{equation} Y_t=\\phi_1 Y_{t-1}+\\phi_2 Y_{t-2}+\\dots+\\phi_p Y_{t-p}+\\varepsilon_t \\tag{2.2} \\end{equation}\\] Interpretasi dari persamaan di atas adalah : nilai saat ini dari deret waktu \\(Y_t\\) adalah kombinasi linier dari \\(p\\) nilai dirinya di masa lalu ditambah dengan galat, \\(\\varepsilon_t\\) Misalkan proses \\(\\{Y_t\\}\\) terpusat, \\(Y_t\\) mengikuti proses AR(1) maka dapat dinyatakan dengan persamaan berikut \\[\\begin{equation} Y_t=\\phi_1 Y_{t-1}+\\varepsilon_t \\end{equation}\\] Karena \\(\\varepsilon_t\\sim \\text{Normal}(0,\\sigma^2_\\varepsilon)\\), maka \\(E[Y_t]= 0\\) dan \\(\\text{Var}(Y_t)=\\frac{\\sigma_\\varepsilon^2}{1-\\phi_1^2}\\) (Bukti diserahkan kepada pembaca sebagai latihan) sedangkan untuk kovariansinya dapat diperoleh \\[\\begin{align*} \\text{Cov}(Y_t,Y_{t-1}) &amp;=\\text{Cov}(\\phi_1 Y_{t-1}+\\varepsilon_t,Y_{t-1} ) \\\\ &amp;=\\phi_1 \\text{Cov}(Y_{t-1},Y_{t-1})+\\text{Cov}(\\varepsilon_{t},Y_{t-1} ) \\\\ &amp;=\\phi_1 \\gamma_0 \\end{align*}\\] dan \\[\\begin{align*} \\text{Cov}(Y_t,Y_{t-2})&amp;=\\text{Cov}(\\phi_1 Y_{t-1}+\\varepsilon_t, Y_{t-2}) \\\\ &amp;= \\text{Cov}(\\phi_1 (\\phi_1Y_{t-2}+\\varepsilon_{t-1})+\\varepsilon_t, Y_{t-2}) \\\\ &amp;= \\text{Cov}(\\phi_1^2 Y_{t-2},Y_{t-2}) + \\text{Cov}(\\phi_1\\varepsilon_{t-1}),Y_{t-2}) + \\text{Cov}(\\varepsilon_t,Y_{t-2}) \\\\ &amp;=\\phi_1^2\\gamma_0 \\end{align*}\\] sehingga fungsi autokovariansi untuk model AR(1) adalah \\[\\begin{align*} \\gamma_k = \\frac{\\phi_1^k \\sigma_\\varepsilon^2}{1-\\phi_1^2}, \\quad k \\geq 0 \\end{align*}\\] dan fungsi autokorelasinya adalah \\[\\begin{align*} \\rho_k = \\frac{\\gamma_k}{\\gamma_0} = \\phi_1^k \\quad k \\geq 0 \\end{align*}\\] Untuk membuat simulasi model AR(1) dapat menggunakan kode berikut : n_sim &lt;- 150 # Banyak data phi &lt;- 0.2 # Nilai dari phi_1 simulasi_ar &lt;- arima.sim(model = list(c(1,0,0), ar = phi), n = n_sim) plot(simulasi_ar, main = &#39;Grafik Data AR(1)&#39;) Jurnal Praktikum 8 1. Berikan interpretasi anda terhadap gambar tersebut ! 2. Apakah data tersebar pada rataan data ? 3. Apakah terdapat pola tren data ? acf(simulasi_ar, main = &#39;Grafik ACF Data AR(1)&#39;, lag.max = 36) Jurnal Praktikum 9 1. Berikan interpretasi anda terhadap gambar tersebut ! 2. Apakah ACF berprilaku sesuai dengan model AR (1)? pacf(simulasi_ar, main = &#39;Grafik PACF Data AR(1)&#39;, lag.max = 36) Jurnal Praktikum 8 1. Berikan interpretasi anda mengenai grafik tersebut ! 2. Apakah data tersebut masih cocok dimodelkan dengan model AR(1) ? 3. Ulangi langkah di atas dengan memvariasikan nilai variabel phi dan n_sim ! 2.3 Autoregressive Moving Average (ARMA) Misalkan \\(Y_t=(Y_1,Y_2,…,Y_n )\\), jika proses \\(Y_t\\) mengikuti proses ARMA dengan orde \\((p,q)\\) maka dapat dinyatakan dengan persamaan berikut \\[\\begin{equation} Y_t=\\phi_1 Y_{t-1}+\\phi_2 Y_{t-2}+\\dots+\\phi_p Y_{t-p}+\\varepsilon_{t}-\\theta_1 \\varepsilon_{t-1}-\\theta_2 \\varepsilon_{t-2}-\\dots -\\theta_q \\varepsilon_{t-q} \\end{equation}\\] (Persamaan umum untuk \\(E[Y_t]\\) dan \\(\\text{Var}(Y_t)\\) dari proses ARMA (1,1) diserahkan kepada pembaca) Untuk membuat simulasi model ARMA(1,1) dapat menggunakan kode berikut : n_sim &lt;- 150 # Banyak data theta &lt;- -0.3 # Nilai dari theta_1 phi &lt;- 0.2 # Nilai dari phi_1 simulasi_ar &lt;- arima.sim(model = list(c(1,0,1), ar = phi, ma = theta), n = n_sim) plot(simulasi_ar, main = &#39;Grafik Data ARMA(1,1)&#39;) acf(simulasi_ar, main = &#39;Grafik ACF Data ARMA(1,1)&#39;, lag.max = 36) pacf(simulasi_ar, main = &#39;Grafik PACF Data ARMA(1,1)&#39;, lag.max = 36) 2.4 Simulasi Data Manual Misal proses \\(\\{Y_t\\}\\) mengikuti model ARMA (1,1) maka persamaannya adalah : \\[\\begin{equation} Y_t=\\phi_1 Y_{t-1}+\\varepsilon_{t}-\\theta_1 \\varepsilon_{t-1} \\end{equation}\\] n_sim &lt;- 100 # Banyak Data phi &lt;- 0.8 # Nilai dari phi_1 theta &lt;- -0.5 # Nilai dari theta_1 sig &lt;- 16 # Besar standar deviasi error Y &lt;- c(rep(0, #Nilai awal n_sim)) # Membuat array / vektor data e &lt;- rnorm(n = n_sim, mean = 0, sd = sig) # Membuat galat for(i in 2:n_sim){ if(i) Y[i] &lt;- phi*Y[i-1] + e[i] - theta*e[i-1] } plot(Y, type = &#39;l&#39;, main = &#39;Data ARMA(1,1) Manual&#39;) (#fig:Membuat Data)Grafik Data Manual Berikutnya akan dicoba menghitung ACF secara manual maxLag &lt;- 25 acf_manual &lt;- rep(1,maxLag) for(i in 1:maxLag){ pembilang &lt;- (Y[1:(n_sim-i+1)]-mean(Y))%*%(Y[i:n_sim]-mean(Y)) penyebut &lt;- sum((Y-mean(Y))^2) acf_manual[i]&lt;-sum(pembilang/penyebut) } acf_r &lt;- as.vector(acf(Y,lag.max = 24,plot = F)$acf) galat &lt;- acf_manual - acf_r sum(galat) # Total Galat ## [1] -3.365364e-16 Terakhir akan dicoba menghitung PACF secara manual. Perhatikan bahwa PACF dapat dituliskan dengan persamaan Yule Walker seperti berikut : \\[\\begin{equation} \\rho_j = \\phi_{k1} \\rho_{j-1} + \\phi_{k2} \\rho_{j-2}+ \\phi_{k3} \\rho_{j-3} +\\dots +\\phi_{kk} \\rho_{j-k}, \\quad k \\in \\mathbb{N} \\end{equation}\\] Secara umum maka diperoleh \\[\\begin{align*} \\phi_{k1} + \\rho_1 \\phi_{k2} + \\rho_2 \\phi_{k3} + \\dots + \\rho_{k-1} \\phi_{kk}&amp;= \\rho_1 \\\\ \\rho_1\\phi_{k1} + \\phi_{k2} + \\rho_1 \\phi_{k3} + \\dots + \\rho_{k-2} \\phi_{kk}&amp;= \\rho_2 \\\\ \\rho_2\\phi_{k1} + \\rho_1 \\phi_{k2} + \\phi_{k3} + \\dots + \\rho_{k-3} \\phi_{kk}&amp;= \\rho_3 \\\\ \\quad \\quad \\vdots \\\\ \\rho_{k-1}\\phi_{k1} + \\rho_{k-2}\\phi_{k2} + \\rho_{k-3} \\phi_{k3} + \\dots + \\phi_{kk}&amp;= \\rho_k \\\\ \\end{align*}\\] Sehingga persamaan ini dapat ditulis menjadi persamaan matriks sebagai berikut : \\[\\begin{equation} \\mathbf{A}\\mathbf{x} = \\mathbf{y} \\end{equation}\\] dengan masing - masing, \\[\\begin{equation} \\mathbf{A} = \\begin{bmatrix} 1 &amp;\\rho_1 &amp; \\rho_2 &amp; \\dots &amp; \\rho_{k-1} \\\\ \\rho_1 &amp; 1 &amp; \\rho_1 &amp; \\dots &amp; \\rho_{k-2} \\\\ \\rho_2 &amp; \\rho_1 &amp; 1 &amp; \\dots &amp; \\rho_{k-3} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots &amp; \\vdots \\\\ \\rho_{k-1}&amp; \\rho_{k-2} &amp; \\rho_{k-3} &amp; \\dots &amp;1 \\end{bmatrix} \\end{equation}\\] dan \\[\\begin{equation} \\mathbf{x}= \\begin{bmatrix} \\phi_{k1}\\\\ \\phi_{k2}\\\\ \\phi_{k3}\\\\ \\vdots \\\\ \\phi_{kk} \\end{bmatrix} \\text{ dan } \\mathbf{y} = \\begin{bmatrix} \\rho_1 \\\\ \\rho_2 \\\\ \\rho_3 \\\\ \\vdots \\\\ \\rho_k \\end{bmatrix} \\end{equation}\\] Sehingga untuk menghitung nilai dari \\(\\mathbf{x}\\) dapat dilakukan dengan : \\[\\begin{equation} \\mathbf{x} = \\mathbf{A}^{-1}\\mathbf{y} \\end{equation}\\] Ingat bahwa nilai korelasi parsial yang ingin dihitung adalah \\(\\phi_{kk}\\) sehingga perhitungannya dapat dilakukan iterasi sebagai berikut : library(matrixcalc) # Untuk mencari invers matriks ## Warning: package &#39;matrixcalc&#39; was built under R version 4.2.1 maxLag &lt;- 24 # Ukuran vektor dan matriks pacf_manual &lt;- rep(0,maxLag) for (k in 1:maxLag){ if (k ==1){ pacf_manual[k] &lt;- acf_r[2] # Hati - hati } #jika mau mengubah maxLag else{ rho &lt;- acf_r[1:(k+1)] # Vektor y phi &lt;- matrix(1, nrow=k,ncol=k) # Matriks A for (i in 1:(k)){ for (j in 1:(k)){ phi[i,j] &lt;- rho[abs(i-j)+1] # Membuat matriks simetri } }# vektor x pacf_manual[k] &lt;- as.vector(matrix.inverse(phi)%*%rho[2:(k+1)])[k] } } pacf_r &lt;- as.vector(acf(Y, lag.max = maxLag, type = &#39;partial&#39;, plot = F)$acf) galat &lt;- pacf_manual - pacf_r sum(galat) # Total Galat ## [1] -1.39385e-15 "]]
